name: Deploy to production

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Alibaba Cloud Container Registry
        uses: docker/login-action@v2
        with:
          registry: registry.cn-chengdu.aliyuncs.com
          username: ${{ secrets.ALICLOUD_USERNAME }}
          password: ${{ secrets.ALICLOUD_PASSWORD }}

      - name: Build and push Docker image
        run: |
          # 生成唯一镜像标签 (Git短提交哈希 + 日期)
          IMAGE_TAG="$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
          PUBLIC_IMAGE=registry.cn-chengdu.aliyuncs.com/ray321/portal-task-web
          VPC_IMAGE=registry-vpc.cn-chengdu.aliyuncs.com/ray321/portal-task-web

          echo "🛠 构建镜像标签: $IMAGE_TAG"

          # 构建并标记镜像 (同时标记公网)
          docker build \
            --build-arg DATABASE_URL=${{ secrets.SUPABASE_POSTGRES_DATABASE_URL }} \
            --build-arg DIRECT_URL=${{ secrets.SUPABASE_POSTGRES_DIRECT_URL }} \
            -t $PUBLIC_IMAGE:$IMAGE_TAG .

          # 推送镜像到公网仓库
          docker push $PUBLIC_IMAGE:$IMAGE_TAG

          # 保存标签供后续步骤使用
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "VPC_IMAGE=$VPC_IMAGE" >> $GITHUB_ENV

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Configure cluster access
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBECONFIG_B64" | base64 --decode > $HOME/.kube/config
          export KUBECONFIG=$HOME/.kube/config

          echo "🧪 验证集群连接..."
          kubectl cluster-info || { echo "❌ 集群连接失败"; exit 1; }

      - name: Deploy to Kubernetes
        run: |
          echo "::add-mask::$VPC_IMAGE"  # 隐藏内网地址日志
          echo "🚀 正在部署版本: $IMAGE_TAG"

          # 替换部署文件中的占位符
          sed -i "s|__IMAGE_TAG__|$IMAGE_TAG|g" deployment.yaml
          sed -i "s|__IMAGE_NAME__|$VPC_IMAGE|g" deployment.yaml

          # 声明式应用配置
          kubectl apply -f deployment.yaml

          # 等待滚动更新完成
          kubectl rollout status deployment/portal-task-web-deployment --timeout=180s || {
            echo "❌ 部署失败，查看 Pod 状态："
            kubectl get pods
            echo "❌ 新 Pod 日志如下："
            kubectl logs -l app=portal-task-web --tail=50
            exit 1
          }

          echo "✅ 部署完成"
