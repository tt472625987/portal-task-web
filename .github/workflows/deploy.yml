name: 🚀 Build & Deploy to Production

on:
  push:
    branches: [main]

jobs:
  # =============================
  # 1️⃣ 构建镜像并推送到腾讯 TCR
  # =============================
  build:
    name: 🏗️ Build & Push Docker Image
    runs-on: [self-hosted, linux, x64]

    outputs:
      image: ${{ steps.meta.outputs.image }}
      tag: ${{ steps.meta.outputs.tag }}

    steps:
      # 拉取仓库代码
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: tt472625987/portal-task-web
          fetch-depth: 0
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY || '' }}

      # 缓存 Node 模块，加快 yarn install
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      # 登录阿里云容器镜像服务 ACR（VPC 内网地址，用于推送）
      - name: Login to Alibaba Cloud Container Registry (VPC)
        uses: docker/login-action@v3
        with:
          registry: registry-vpc.cn-chengdu.aliyuncs.com
          username: ${{ secrets.ALICLOUD_USERNAME }}
          password: ${{ secrets.ALICLOUD_PASSWORD }}

      # 生成镜像标签（构建号 + commit 短码）
      - name: Generate image metadata
        id: meta
        run: |
          # VPC 内网地址（用于推送，速度快且免流量费）
          VPC_IMAGE=registry-vpc.cn-chengdu.aliyuncs.com/ray321/portal-task-web
          # 公网地址（用于 K8s 拉取，VPC和公网指向同一个镜像仓库）
          PUBLIC_IMAGE=registry.cn-chengdu.aliyuncs.com/ray321/portal-task-web

          # 镜像标签：build-构建号-commit短码
          # 例如：build-123-abc1234
          IMAGE_TAG="build-${GITHUB_RUN_NUMBER}-$(git rev-parse --short HEAD)"

          # 输出给后续步骤
          echo "image=$PUBLIC_IMAGE" >> $GITHUB_OUTPUT
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "vpc_image=$VPC_IMAGE" >> $GITHUB_OUTPUT

          echo "🏷️  镜像标签: $IMAGE_TAG"
          echo "📤 推送地址: $VPC_IMAGE:$IMAGE_TAG"
          echo "📦 拉取地址: $PUBLIC_IMAGE:$IMAGE_TAG"

      # 构建并推送镜像（使用 VPC 内网推送，速度更快）
      - name: Build & Push Docker Image
        run: |
          VPC_IMAGE=${{ steps.meta.outputs.vpc_image }}
          PUBLIC_IMAGE=${{ steps.meta.outputs.image }}
          IMAGE_TAG=${{ steps.meta.outputs.tag }}

          echo "🛠 构建镜像: $VPC_IMAGE:$IMAGE_TAG"

          # 构建镜像（只 tag VPC 地址）
          docker build \
            --build-arg DATABASE_URL=${{ secrets.SUPABASE_POSTGRES_DATABASE_URL }} \
            --build-arg DIRECT_URL=${{ secrets.SUPABASE_POSTGRES_DIRECT_URL }} \
            -t $VPC_IMAGE:$IMAGE_TAG .

          echo "📤 推送镜像到阿里云 ACR (VPC 内网，速度快且免流量费)..."
          docker push $VPC_IMAGE:$IMAGE_TAG

          echo "✅ 镜像推送成功"
          echo "   🚀 推送地址: $VPC_IMAGE:$IMAGE_TAG"
          echo "   📦 K8s拉取地址: $PUBLIC_IMAGE:$IMAGE_TAG"
          echo "   💡 提示: VPC和公网地址指向同一个镜像，推送到VPC后可通过公网访问"

          # 输出给后续步骤
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE=$PUBLIC_IMAGE" >> $GITHUB_ENV

  # =============================
  # 2️⃣ 部署到 Kubernetes 集群
  # =============================
  deploy:
    name: 🚀 Deploy to Kubernetes
    runs-on: [self-hosted, linux, x64]
    needs: build
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 配置 K8s 访问
      - name: Configure cluster access
        env:
          KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBECONFIG_CONTENT" > $HOME/.kube/config
          export KUBECONFIG=$HOME/.kube/config
          echo "✅ K8s 集群连接成功"

      # 同步应用 Secrets 到 Kubernetes
      - name: Sync Application Secrets to Kubernetes
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: supabase-secret-portal-task-web
            namespace: default
          type: Opaque
          stringData:
            DATABASE_URL: "${{ secrets.SUPABASE_POSTGRES_DATABASE_URL }}"
            DIRECT_URL: "${{ secrets.SUPABASE_POSTGRES_DIRECT_URL }}"
          EOF
          echo "✅ 应用 Secrets 已同步"

      # 创建阿里云镜像拉取凭证（让腾讯云 K8s 能拉取阿里云 ACR 镜像）
      - name: Create Alibaba Cloud ACR Pull Secret
        run: |
          # 删除旧的 secret（如果存在）
          kubectl delete secret aliyun-acr-secret -n default --ignore-not-found=true

          # 创建新的 docker-registry secret
          kubectl create secret docker-registry aliyun-acr-secret \
            --docker-server=registry.cn-chengdu.aliyuncs.com \
            --docker-username="${{ secrets.ALICLOUD_USERNAME }}" \
            --docker-password="${{ secrets.ALICLOUD_PASSWORD }}" \
            --namespace=default

          echo "✅ 阿里云镜像拉取凭证已创建"

      # 替换镜像并部署
      - name: Apply deployment
        run: |
          IMAGE=${{ needs.build.outputs.image }}
          TAG=${{ needs.build.outputs.tag }}

          sed -i "s|__IMAGE_NAME__|$IMAGE|g" deployment.yaml
          sed -i "s|__IMAGE_TAG__|$TAG|g" deployment.yaml

          echo "🚀 部署版本: $IMAGE:$TAG"
          kubectl apply -f deployment.yaml

      # 检查部署状态并自动回滚（防止坏版本）
      - name: Verify rollout & rollback if failed
        run: |
          DEPLOY_NAME=portal-task-web-deployment
          set -e
          if kubectl rollout status deployment/$DEPLOY_NAME --timeout=180s; then
            echo "✅ 部署成功"
          else
            echo "❌ 部署失败，开始回滚..."
            kubectl rollout undo deployment/$DEPLOY_NAME
            echo "🩹 已回滚到上一个稳定版本"
            exit 1
          fi

      # 部署完成通知（可选）
      - name: Notify Deployment Result
        if: always()
        run: |
          STATUS=${{ job.status }}
          IMAGE=${{ needs.build.outputs.image }}
          TAG=${{ needs.build.outputs.tag }}
          echo "📢 部署状态: $STATUS"
          echo "📦 镜像: $IMAGE:$TAG"

      - name: Clean Docker BuildKit cache
        run: |
          docker builder prune -af
