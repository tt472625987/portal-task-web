name: 🚀 Build & Deploy to Production

on:
  push:
    branches: [main]

jobs:
  # =============================
  # 1️⃣ 构建镜像并推送到腾讯 TCR
  # =============================
  build:
    name: 🏗️ Build & Push Docker Image
    runs-on: [self-hosted, linux, x64]

    outputs:
      image: ${{ steps.meta.outputs.image }}
      tag: ${{ steps.meta.outputs.tag }}

    steps:
      # 拉取仓库代码
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: tt472625987/portal-task-web
          fetch-depth: 0
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY || '' }}

      # 缓存 Node 模块，加快 yarn install
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      # 登录腾讯容器镜像服务 TCR
      - name: Login to Tencent Container Registry
        uses: docker/login-action@v3
        with:
          registry: ccr.ccs.tencentyun.com
          username: ${{ secrets.TCR_USERNAME }}
          password: ${{ secrets.TCR_PASSWORD }}

      # 生成语义化版本号（优先用 Git tag，没有则用日期+commit）
      - name: Generate image metadata
        id: meta
        run: |
          IMAGE=ccr.ccs.tencentyun.com/ray321/portal-task-web
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            VERSION=$(git describe --tags --abbrev=0)
          else
            VERSION="v0.0.0-$(git rev-parse --short HEAD)"
          fi
          IMAGE_TAG="${VERSION}-$(date +%Y%m%d)"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "🧩 IMAGE=$IMAGE"
          echo "🧩 TAG=$IMAGE_TAG"

      - name: Configure Docker builder
        run: |
          docker buildx create --use --name default --driver docker || true

      # 构建并推送镜像，开启 Docker 层缓存
      - name: Build & Push Docker Image
        run: |
          docker buildx build --builder default --load \
            --build-arg DATABASE_URL=${{ secrets.SUPABASE_POSTGRES_DATABASE_URL }} \
            --build-arg DIRECT_URL=${{ secrets.SUPABASE_POSTGRES_DIRECT_URL }} \
            -t $IMAGE:$IMAGE_TAG \
            --push .

  # =============================
  # 2️⃣ 部署到 Kubernetes 集群
  # =============================
  deploy:
    name: 🚀 Deploy to Kubernetes
    runs-on: [self-hosted, linux, x64]
    needs: build
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 配置 K8s 访问
      - name: Configure cluster access
        env:
          KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBECONFIG_CONTENT" > $HOME/.kube/config
          export KUBECONFIG=$HOME/.kube/config
          echo "✅ K8s 集群连接成功"

      # 同步 Secrets 到 Kubernetes
      - name: Sync Secrets to Kubernetes
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: supabase-secret-portal-task-web
            namespace: default
          type: Opaque
          stringData:
            DATABASE_URL: "${{ secrets.SUPABASE_POSTGRES_DATABASE_URL }}"
            DIRECT_URL: "${{ secrets.SUPABASE_POSTGRES_DIRECT_URL }}"
          EOF
          echo "✅ Secrets 已同步"

      # 替换镜像并部署
      - name: Apply deployment
        run: |
          IMAGE=${{ needs.build.outputs.image }}
          TAG=${{ needs.build.outputs.tag }}

          sed -i "s|__IMAGE_NAME__|$IMAGE|g" deployment.yaml
          sed -i "s|__IMAGE_TAG__|$TAG|g" deployment.yaml

          echo "🚀 部署版本: $IMAGE:$TAG"
          kubectl apply -f deployment.yaml

      # 检查部署状态并自动回滚（防止坏版本）
      - name: Verify rollout & rollback if failed
        run: |
          DEPLOY_NAME=portal-task-web-deployment
          set -e
          if kubectl rollout status deployment/$DEPLOY_NAME --timeout=180s; then
            echo "✅ 部署成功"
          else
            echo "❌ 部署失败，开始回滚..."
            kubectl rollout undo deployment/$DEPLOY_NAME
            echo "🩹 已回滚到上一个稳定版本"
            exit 1
          fi

      # 部署完成通知（可选）
      - name: Notify Deployment Result
        if: always()
        run: |
          STATUS=${{ job.status }}
          IMAGE=${{ needs.build.outputs.image }}
          TAG=${{ needs.build.outputs.tag }}
          echo "📢 部署状态: $STATUS"
          echo "📦 镜像: $IMAGE:$TAG"
